(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{52:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),o=(n(0),n(74)),i={id:"queries",title:"Queries",sidebar_label:"Queries"},c={unversionedId:"queries",id:"queries",isDocsHomePage:!1,title:"Queries",description:"Using React Hooks",source:"@site/docs/queries.md",slug:"/queries",permalink:"/rescript-apollo-client/docs/queries",editUrl:"https://github.com/reasonml-community/rescript-apollo-client/edit/master/documentation/docs/queries.md",version:"current",sidebar_label:"Queries",sidebar:"docs",previous:{title:"Create a Client",permalink:"/rescript-apollo-client/docs/client-configuration"},next:{title:"Mutations",permalink:"/rescript-apollo-client/docs/mutations"}},s=[{value:"Using React Hooks",id:"using-react-hooks",children:[{value:"Basics",id:"basics",children:[]},{value:"Typical Usage",id:"typical-usage",children:[]},{value:"Lazy Fetching of Data",id:"lazy-fetching-of-data",children:[]},{value:"Live Queries",id:"live-queries",children:[]}]},{value:"Directly Via the Apollo Client",id:"directly-via-the-apollo-client",children:[]}],l={rightToc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"using-react-hooks"},"Using React Hooks"),Object(o.b)("p",null,"Queries work just like in JavaScript. You can declaratively fetch data using the ",Object(o.b)("inlineCode",{parentName:"p"},"useQuery")," hook."),Object(o.b)("h3",{id:"basics"},"Basics"),Object(o.b)("p",null,"Create a query module with ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-ppx"),". We'll use this throughout the examples on this page."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),"module TodosQuery = %graphql(`\n  query TodosQuery {\n    todos: allTodos {\n      id\n      text\n      completed\n    }\n  }\n`)\n")),Object(o.b)("p",null,"To execute the query, just call the ",Object(o.b)("inlineCode",{parentName:"p"},"use")," hook in a component like so."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),'@react.component\nlet make = () =>\n  switch TodosQuery.use() {\n  | {loading: true} => "Loading..."->React.string\n  | {error: Some(_error)} => "Error loading data"->React.string\n  | {data: Some({todos})} =>\n    <div>\n      {"There are "->React.string} {todos->Belt.Array.length->React.int} {" To-Dos"->React.string}\n    </div>\n  | {data: None, error: None, loading: false} =>\n    "You might think this is impossible, but depending on the situation it might not be!"->React.string\n  }\n')),Object(o.b)("h3",{id:"typical-usage"},"Typical Usage"),Object(o.b)("p",null,"While we wish it was always as easy as above, there are many situations where you may be fetching new data while rendering a cached results, etc. Here's a slightly more complex example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),'@react.component\nlet make = () => {\n  let queryResult = TodosQuery.use()\n\n  <div>\n    {switch queryResult {\n    | {loading: true, data: None} => <p> {"Loading"->React.string} </p>\n    | {loading, data: Some({todos}), error, fetchMore} =>\n      <div>\n        <dialog>\n          {loading ? <p> {"Refreshing..."->React.string} </p> : React.null}\n          {switch error {\n          | Some(_) => <p> {"Something went wrong, data may be incomplete"->React.string} </p>\n          | None => React.null\n          }}\n        </dialog>\n        <p>\n          {React.string("There are " ++ (todos->Belt.Array.length->string_of_int ++ " To-Dos"))}\n        </p>\n        <p>\n          <button onClick={_ => fetchMore()->Utils.Promise.ignore}>\n            {"Fetch More!"->React.string}\n          </button>\n        </p>\n      </div>\n    | {loading: false, data: None} => <p> {"Error loading data"->React.string} </p>\n    }}\n  </div>\n}\n')),Object(o.b)("h3",{id:"lazy-fetching-of-data"},"Lazy Fetching of Data"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),'@react.component\nlet make = () => {\n  let (executeQuery, queryResult) = TodosQuery.useLazy()\n  <div>\n    {switch queryResult {\n    | Unexecuted(_) => <>\n        {"Waiting to be executed... "->React.string}\n        <button onClick={_ => executeQuery()} value="execute"> {"Execute"->React.string} </button>\n      </>\n    | Executed({loading: true, data: None}) => <p> {"Loading"->React.string} </p>\n    | Executed({loading, data: Some({todos}), error}) => <>\n        <dialog>\n          {loading ? <p> {"Refreshing..."->React.string} </p> : React.null}\n          {switch error {\n          | Some(_) => <p> {"Something went wrong, data may be incomplete"->React.string} </p>\n          | None => React.null\n          }}\n        </dialog>\n        <p>\n          {React.string("There are " ++ (todos->Belt.Array.length->string_of_int ++ " To-Dos"))}\n        </p>\n      </>\n    | Executed({loading: false, data: None}) => <p> {"Error loading data"->React.string} </p>\n    }}\n  </div>\n}\n')),Object(o.b)("h3",{id:"live-queries"},"Live Queries"),Object(o.b)("p",null,"It's possible to update a query by attaching a subscription. Please see the subscriptions section on how to do this."),Object(o.b)("h2",{id:"directly-via-the-apollo-client"},"Directly Via the Apollo Client"),Object(o.b)("p",null,"There are many instances where you might want to query outside the context of React. You can use the ",Object(o.b)("inlineCode",{parentName:"p"},"query")," method directly on the client to do this."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),'let addTodo = _ =>\n  // This assumes you\'ve set up a Client module as in the Getting Started section\n  Apollo.client.mutate(~mutation=module(AddTodoMutation), {text: "Another To-Do"})\n  ->Promise.map(result =>\n    switch result {\n    | Ok({data}) => Js.log2("mutate result: ", data)\n    | Error(error) => Js.log2("Error: ", error)\n    },\n  )\n  ->ignore\n')),Object(o.b)("p",null,"If you need to react to changes in some data in the cache, not just a one-off fetch, you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"watchQuery")," method."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),'// This assumes you\'ve set up a Client module as in the Getting Started section\nlet observableQuery = Apollo.client.watchQuery(~query=module(TodosQuery), ())\n\nlet watchQuerySubscription = observableQuery.subscribe(~onNext=result =>\n  switch result {\n  | {data: Some({todos})} => Js.log2("watchQuery To-Dos: ", todos)\n  | _ => ()\n  }\n, ())\n\n// Unsubscribe like so:\n// watchQuerySubscription.unsubscribe();\n')))}u.isMDXComponent=!0},74:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return g}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),b=r,g=d["".concat(i,".").concat(b)]||d[b]||p[b]||o;return n?a.a.createElement(g,c(c({ref:t},l),{},{components:n})):a.a.createElement(g,c({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);