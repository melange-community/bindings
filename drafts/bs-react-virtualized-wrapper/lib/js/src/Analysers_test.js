// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Jest      = require("bs-jest/lib/js/src/jest.js");
var Analysers = require("./Analysers.js");

var accRef = [/* record */[
    /* name */"ignore me",
    /* elements : array */[],
    /* passed : [] */0,
    /* failed : [] */0
  ]];

var stage_003 = /* arrival */new Date(2011, 7, 10);

var stage_004 = /* departure : Some */[new Date(2012, 11, 10)];

var stage = /* record */[
  /* id */0,
  /* spellId */"aSpell",
  /* patientId */"aPatient",
  stage_003,
  stage_004,
  /* ward */"aWard",
  /* specialty */"aSpecialty",
  /* consultant */"aConsultant"
];

describe("stageProcessor", (function () {
        Jest.test("passWithDeparture", (function () {
                var result = Analysers.EnsureAdmissionBeforeDischarge[/* stageProcessor */0](stage);
                if (result) {
                  return Jest.fail("didn't expect fail!");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        Jest.test("passWithoutDeparture", (function () {
                var newrecord = stage.slice();
                newrecord[/* departure */4] = /* None */0;
                var result = Analysers.EnsureAdmissionBeforeDischarge[/* stageProcessor */0](newrecord);
                if (result) {
                  return Jest.fail("didn't expect fail!");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        Jest.test("failWithoutDepartureBeforeAdmission", (function () {
                var newrecord = stage.slice();
                newrecord[/* departure */4] = /* Some */[new Date(2010, 7, 10)];
                var result = Analysers.EnsureAdmissionBeforeDischarge[/* stageProcessor */0](newrecord);
                if (result) {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                } else {
                  return Jest.fail("expected to fail!");
                }
              }));
        return Jest.test("failWithoutDepartureOnAdmission", (function () {
                      var newrecord = stage.slice();
                      newrecord[/* departure */4] = /* Some */[stage_003];
                      var result = Analysers.EnsureAdmissionBeforeDischarge[/* stageProcessor */0](newrecord);
                      if (result) {
                        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                      } else {
                        return Jest.fail("expected to fail!");
                      }
                    }));
      }));

var EnsureAdmissionBeforeDischarge = /* module */[/* stage */stage];

var stage_003$1 = /* arrival */new Date(2011, 7, 10);

var stage$1 = /* record */[
  /* id */0,
  /* spellId */"aSpell",
  /* patientId */"aPatient",
  stage_003$1,
  /* departure : None */0,
  /* ward */"aWard",
  /* specialty */"aSpecialty",
  /* consultant */"aConsultant"
];

describe("stageProcessor", (function () {
        Jest.test("happyPath", (function () {
                var result = Analysers.PreventTimeTravel[/* stageProcessor */1](stage$1);
                if (result) {
                  return Jest.fail("didn't expect fail!");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        return Jest.test("fail with future admission", (function () {
                      var newrecord = stage$1.slice();
                      newrecord[/* arrival */3] = new Date(Date.now() + 10);
                      var result = Analysers.PreventTimeTravel[/* stageProcessor */1](newrecord);
                      if (result) {
                        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                      } else {
                        return Jest.fail("expected to fail!");
                      }
                    }));
      }));

var PreventTimeTravel = /* module */[/* stage */stage$1];

var jan1 = new Date(2011, 0, 1);

var jan10 = new Date(2011, 0, 10);

var jan15 = new Date(2011, 0, 15);

var feb1 = new Date(2011, 1, 1);

var exampleStage_004 = /* departure : Some */[new Date(2012, 11, 10)];

var exampleStage = /* record */[
  /* id */0,
  /* spellId */"aSpell",
  /* patientId */"aPatient",
  /* arrival */jan1,
  exampleStage_004,
  /* ward */"aWard",
  /* specialty */"aSpecialty",
  /* consultant */"aConsultant"
];

describe("happy path", (function () {
        Jest.test("single discharged stage", (function () {
                var result = Analysers.TheOnlyDepartureIsAtTheEnd[/* journeyProcessor */0](/* :: */[
                      exampleStage,
                      /* [] */0
                    ]);
                if (result) {
                  return Jest.fail("unexpected error");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        Jest.test("single active stage", (function () {
                var newrecord = exampleStage.slice();
                newrecord[/* departure */4] = /* None */0;
                var result = Analysers.TheOnlyDepartureIsAtTheEnd[/* journeyProcessor */0](/* :: */[
                      newrecord,
                      /* [] */0
                    ]);
                if (result) {
                  return Jest.fail("unexpected error");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        Jest.test("multiple stages all discharged", (function () {
                var newrecord = exampleStage.slice();
                newrecord[/* arrival */3] = jan1;
                newrecord[/* departure */4] = /* Some */[jan10];
                var newrecord$1 = exampleStage.slice();
                newrecord$1[/* arrival */3] = jan10;
                newrecord$1[/* departure */4] = /* Some */[jan15];
                var newrecord$2 = exampleStage.slice();
                newrecord$2[/* arrival */3] = jan15;
                newrecord$2[/* departure */4] = /* Some */[feb1];
                var result = Analysers.TheOnlyDepartureIsAtTheEnd[/* journeyProcessor */0](/* :: */[
                      newrecord,
                      /* :: */[
                        newrecord$1,
                        /* :: */[
                          newrecord$2,
                          /* [] */0
                        ]
                      ]
                    ]);
                if (result) {
                  return Jest.fail("unexpected error");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        return Jest.test("multiple stages, last one is active", (function () {
                      var newrecord = exampleStage.slice();
                      newrecord[/* arrival */3] = jan1;
                      newrecord[/* departure */4] = /* Some */[jan10];
                      var newrecord$1 = exampleStage.slice();
                      newrecord$1[/* arrival */3] = jan10;
                      newrecord$1[/* departure */4] = /* Some */[jan15];
                      var newrecord$2 = exampleStage.slice();
                      newrecord$2[/* arrival */3] = jan15;
                      newrecord$2[/* departure */4] = /* None */0;
                      var result = Analysers.TheOnlyDepartureIsAtTheEnd[/* journeyProcessor */0](/* :: */[
                            newrecord,
                            /* :: */[
                              newrecord$1,
                              /* :: */[
                                newrecord$2,
                                /* [] */0
                              ]
                            ]
                          ]);
                      if (result) {
                        return Jest.fail("unexpected error");
                      } else {
                        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                      }
                    }));
      }));

describe("error cases", (function () {
        Jest.test("multiple active", (function () {
                var newrecord = exampleStage.slice();
                newrecord[/* arrival */3] = jan1;
                newrecord[/* departure */4] = /* None */0;
                var newrecord$1 = exampleStage.slice();
                newrecord$1[/* arrival */3] = jan10;
                newrecord$1[/* departure */4] = /* None */0;
                var result = Analysers.TheOnlyDepartureIsAtTheEnd[/* journeyProcessor */0](/* :: */[
                      newrecord,
                      /* :: */[
                        newrecord$1,
                        /* [] */0
                      ]
                    ]);
                if (result) {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                } else {
                  return Jest.fail("expected this to fail");
                }
              }));
        return Jest.test("departure before active", (function () {
                      var newrecord = exampleStage.slice();
                      newrecord[/* arrival */3] = jan1;
                      newrecord[/* departure */4] = /* None */0;
                      var newrecord$1 = exampleStage.slice();
                      newrecord$1[/* arrival */3] = jan10;
                      newrecord$1[/* departure */4] = /* Some */[feb1];
                      var result = Analysers.TheOnlyDepartureIsAtTheEnd[/* journeyProcessor */0](/* :: */[
                            newrecord,
                            /* :: */[
                              newrecord$1,
                              /* [] */0
                            ]
                          ]);
                      if (result) {
                        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                      } else {
                        return Jest.fail("expected this to fail");
                      }
                    }));
      }));

var TheOnlyDepartureIsAtTheEnd = /* module */[
  /* jan1 */jan1,
  /* jan10 */jan10,
  /* jan15 */jan15,
  /* feb1 */feb1,
  /* exampleStage */exampleStage
];

var jan1$1 = new Date(2011, 0, 1);

var jan10$1 = new Date(2011, 0, 10);

var jan15$1 = new Date(2011, 0, 15);

var feb1$1 = new Date(2011, 1, 1);

var exampleStage_004$1 = /* departure : Some */[new Date(2012, 11, 10)];

var exampleStage$1 = /* record */[
  /* id */0,
  /* spellId */"aSpell",
  /* patientId */"aPatient",
  /* arrival */jan1$1,
  exampleStage_004$1,
  /* ward */"aWard",
  /* specialty */"aSpecialty",
  /* consultant */"aConsultant"
];

describe("happy path", (function () {
        Jest.test("single stage", (function () {
                var result = Analysers.StagesAreConsecutiveWithinAJourney[/* journeyProcessor */0](/* :: */[
                      exampleStage$1,
                      /* [] */0
                    ]);
                if (result) {
                  return Jest.fail("unexpected error");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        Jest.test("consecutive stages (still active)", (function () {
                var newrecord = exampleStage$1.slice();
                newrecord[/* arrival */3] = jan1$1;
                newrecord[/* departure */4] = /* Some */[jan10$1];
                var newrecord$1 = exampleStage$1.slice();
                newrecord$1[/* arrival */3] = jan10$1;
                newrecord$1[/* departure */4] = /* None */0;
                var result = Analysers.StagesAreConsecutiveWithinAJourney[/* journeyProcessor */0](/* :: */[
                      newrecord,
                      /* :: */[
                        newrecord$1,
                        /* [] */0
                      ]
                    ]);
                if (result) {
                  return Jest.fail("unexpected error");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        return Jest.test("consecutive stages (none active)", (function () {
                      var newrecord = exampleStage$1.slice();
                      newrecord[/* arrival */3] = jan1$1;
                      newrecord[/* departure */4] = /* Some */[jan10$1];
                      var newrecord$1 = exampleStage$1.slice();
                      newrecord$1[/* arrival */3] = jan10$1;
                      newrecord$1[/* departure */4] = /* Some */[jan15$1];
                      var result = Analysers.StagesAreConsecutiveWithinAJourney[/* journeyProcessor */0](/* :: */[
                            newrecord,
                            /* :: */[
                              newrecord$1,
                              /* [] */0
                            ]
                          ]);
                      if (result) {
                        return Jest.fail("unexpected error");
                      } else {
                        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                      }
                    }));
      }));

describe("stages that overlap fail", (function () {
        Jest.test("active", (function () {
                var newrecord = exampleStage$1.slice();
                newrecord[/* arrival */3] = jan1$1;
                newrecord[/* departure */4] = /* Some */[jan15$1];
                var newrecord$1 = exampleStage$1.slice();
                newrecord$1[/* arrival */3] = jan10$1;
                newrecord$1[/* departure */4] = /* None */0;
                var result = Analysers.StagesAreConsecutiveWithinAJourney[/* journeyProcessor */0](/* :: */[
                      newrecord,
                      /* :: */[
                        newrecord$1,
                        /* [] */0
                      ]
                    ]);
                if (result) {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                } else {
                  return Jest.fail("expected this to fail");
                }
              }));
        return Jest.test("not active", (function () {
                      var newrecord = exampleStage$1.slice();
                      newrecord[/* arrival */3] = jan1$1;
                      newrecord[/* departure */4] = /* Some */[jan15$1];
                      var newrecord$1 = exampleStage$1.slice();
                      newrecord$1[/* arrival */3] = jan10$1;
                      newrecord$1[/* departure */4] = /* Some */[feb1$1];
                      var result = Analysers.StagesAreConsecutiveWithinAJourney[/* journeyProcessor */0](/* :: */[
                            newrecord,
                            /* :: */[
                              newrecord$1,
                              /* [] */0
                            ]
                          ]);
                      if (result) {
                        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                      } else {
                        return Jest.fail("expected this to fail");
                      }
                    }));
      }));

var StagesAreConsecutiveWithinAJourney = /* module */[
  /* jan1 */jan1$1,
  /* jan10 */jan10$1,
  /* jan15 */jan15$1,
  /* feb1 */feb1$1,
  /* exampleStage */exampleStage$1
];

var jan1$2 = new Date(2011, 0, 1);

var jan10$2 = new Date(2011, 0, 10);

var jan15$2 = new Date(2011, 0, 15);

var feb1$2 = new Date(2011, 1, 1);

var mar1 = new Date(2011, 2, 1);

var exampleStage_004$2 = /* departure : Some */[new Date(2012, 11, 10)];

var exampleStage$2 = /* record */[
  /* id */0,
  /* spellId */"aSpell",
  /* patientId */"aPatient",
  /* arrival */jan1$2,
  exampleStage_004$2,
  /* ward */"aWard",
  /* specialty */"aSpecialty",
  /* consultant */"aConsultant"
];

describe("happy path", (function () {
        Jest.test("single journey (still active)", (function () {
                var newrecord = exampleStage$2.slice();
                var journey_001 = /* stages : :: */[
                  (newrecord[/* departure */4] = /* None */0, newrecord),
                  /* [] */0
                ];
                var journey = /* record */[
                  /* id */"1",
                  journey_001
                ];
                var result = Analysers.JourneysAreConsecutive[/* journeysProcessor */0](/* :: */[
                      journey,
                      /* [] */0
                    ]);
                if (result) {
                  return Jest.fail("unexpected error");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        Jest.test("single journey (not active)", (function () {
                var journey_001 = /* stages : :: */[
                  exampleStage$2,
                  /* [] */0
                ];
                var journey = /* record */[
                  /* id */"1",
                  journey_001
                ];
                var result = Analysers.JourneysAreConsecutive[/* journeysProcessor */0](/* :: */[
                      journey,
                      /* [] */0
                    ]);
                if (result) {
                  return Jest.fail("unexpected error");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        Jest.test("consecutive journeys (still active)", (function () {
                var newrecord = exampleStage$2.slice();
                newrecord[/* arrival */3] = jan1$2;
                newrecord[/* departure */4] = /* Some */[jan10$2];
                var newrecord$1 = exampleStage$2.slice();
                newrecord$1[/* arrival */3] = jan10$2;
                newrecord$1[/* departure */4] = /* None */0;
                var result = Analysers.JourneysAreConsecutive[/* journeysProcessor */0](/* :: */[
                      /* record */[
                        /* id */"1",
                        /* stages : :: */[
                          newrecord,
                          /* [] */0
                        ]
                      ],
                      /* :: */[
                        /* record */[
                          /* id */"2",
                          /* stages : :: */[
                            newrecord$1,
                            /* [] */0
                          ]
                        ],
                        /* [] */0
                      ]
                    ]);
                if (result) {
                  return Jest.fail("unexpected error");
                } else {
                  return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                }
              }));
        return Jest.test("consecutive stages (none active)", (function () {
                      var newrecord = exampleStage$2.slice();
                      newrecord[/* arrival */3] = jan1$2;
                      newrecord[/* departure */4] = /* Some */[jan10$2];
                      var newrecord$1 = exampleStage$2.slice();
                      newrecord$1[/* arrival */3] = jan10$2;
                      newrecord$1[/* departure */4] = /* Some */[feb1$2];
                      var result = Analysers.JourneysAreConsecutive[/* journeysProcessor */0](/* :: */[
                            /* record */[
                              /* id */"1",
                              /* stages : :: */[
                                newrecord,
                                /* [] */0
                              ]
                            ],
                            /* :: */[
                              /* record */[
                                /* id */"2",
                                /* stages : :: */[
                                  newrecord$1,
                                  /* [] */0
                                ]
                              ],
                              /* [] */0
                            ]
                          ]);
                      if (result) {
                        return Jest.fail("unexpected error");
                      } else {
                        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                      }
                    }));
      }));

describe("error cases", (function () {
        return Jest.test("both finished and overlap", (function () {
                      var newrecord = exampleStage$2.slice();
                      var journey1_001 = /* stages : :: */[
                        (newrecord[/* arrival */3] = jan1$2, newrecord[/* departure */4] = /* Some */[mar1], newrecord),
                        /* [] */0
                      ];
                      var journey1 = /* record */[
                        /* id */"1",
                        journey1_001
                      ];
                      var newrecord$1 = exampleStage$2.slice();
                      var journey2_001 = /* stages : :: */[
                        (newrecord$1[/* arrival */3] = feb1$2, newrecord$1[/* departure */4] = /* Some */[mar1], newrecord$1),
                        /* [] */0
                      ];
                      var journey2 = /* record */[
                        /* id */"2",
                        journey2_001
                      ];
                      var result = Analysers.JourneysAreConsecutive[/* journeysProcessor */0](/* :: */[
                            journey1,
                            /* :: */[
                              journey2,
                              /* [] */0
                            ]
                          ]);
                      if (result) {
                        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](/* true */1));
                      } else {
                        return Jest.fail("unexpected error");
                      }
                    }));
      }));

var JourneysAreConsecutive = /* module */[
  /* jan1 */jan1$2,
  /* jan10 */jan10$2,
  /* jan15 */jan15$2,
  /* feb1 */feb1$2,
  /* mar1 */mar1,
  /* exampleStage */exampleStage$2
];

exports.accRef                             = accRef;
exports.EnsureAdmissionBeforeDischarge     = EnsureAdmissionBeforeDischarge;
exports.PreventTimeTravel                  = PreventTimeTravel;
exports.TheOnlyDepartureIsAtTheEnd         = TheOnlyDepartureIsAtTheEnd;
exports.StagesAreConsecutiveWithinAJourney = StagesAreConsecutiveWithinAJourney;
exports.JourneysAreConsecutive             = JourneysAreConsecutive;
/* stage Not a pure module */
