// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Set            = require("bs-platform/lib/js/set.js");
var List             = require("bs-platform/lib/js/list.js");
var $$Array          = require("bs-platform/lib/js/array.js");
var Caml_obj         = require("bs-platform/lib/js/caml_obj.js");
var Pervasives       = require("bs-platform/lib/js/pervasives.js");
var ReasonReact      = require("reason-react/lib/js/src/ReasonReact.js");
var ReactVirtualized = require("react-virtualized");

((require('react-virtualized/styles.css')));

function str(prim) {
  return prim;
}

var component = ReasonReact.statelessComponent("PatientTable");

var compare = Caml_obj.caml_compare;

var StageSetSpec = /* module */[/* compare */compare];

var StageSet = $$Set.Make(StageSetSpec);

function makeList(results) {
  return $$Array.concat(List.rev_map((function (param) {
                    var failedStages = param[1];
                    var patient = param[0];
                    return $$Array.concat(List.map((function (journey) {
                                      var isFail = function (s) {
                                        return List.exists((function (x) {
                                                      return +(s === x);
                                                    }), failedStages);
                                      };
                                      return $$Array.of_list(List.map((function (stage) {
                                                        var match = isFail(stage);
                                                        var match$1 = stage[/* departure */4];
                                                        return {
                                                                status: match !== 0 ? "FAIL" : "",
                                                                patientId: patient[/* id */0],
                                                                stageId: Pervasives.string_of_int(stage[/* id */0]),
                                                                arrival: stage[/* arrival */3].toISOString(),
                                                                departure: match$1 ? match$1[0].toISOString() : "",
                                                                ward: stage[/* ward */5],
                                                                consultant: stage[/* consultant */7],
                                                                specialty: stage[/* specialty */6]
                                                              };
                                                      }), journey[/* stages */1]));
                                    }), patient[/* journeys */1]));
                  }), results));
}

var component$1 = ReasonReact.statelessComponent("Column");

function make(spec, children) {
  return ReasonReact.wrapJsForReason(ReactVirtualized.Column, {
              label: spec[/* label */0],
              dataKey: spec[/* dataKey */1],
              width: spec[/* width */2]
            }, children);
}

var Column = /* module */[
  /* component */component$1,
  /* make */make
];

function rowGetter() {
  return (
  ({index}) => l[index]
  );
}

function make$1(result, children) {
  var l = makeList(result);
  var specs = /* array */[
    /* record */[
      /* label */"Status",
      /* dataKey */"status",
      /* width */80
    ],
    /* record */[
      /* label */"Patient",
      /* dataKey */"patientId",
      /* width */80
    ],
    /* record */[
      /* label */"Stage",
      /* dataKey */"stageId",
      /* width */80
    ],
    /* record */[
      /* label */"Arrival",
      /* dataKey */"arrival",
      /* width */200
    ],
    /* record */[
      /* label */"Departure",
      /* dataKey */"departure",
      /* width */200
    ],
    /* record */[
      /* label */"Ward",
      /* dataKey */"ward",
      /* width */300
    ],
    /* record */[
      /* label */"Consultant",
      /* dataKey */"consultant",
      /* width */300
    ],
    /* record */[
      /* label */"Category",
      /* dataKey */"specialty",
      /* width */300
    ]
  ];
  var columns = $$Array.map((function (spec) {
          return ReasonReact.element(/* None */0, /* None */0, make(spec, /* array */[]));
        }), specs);
  var tableWidth = $$Array.fold_left((function (w, spec) {
          return w + spec[/* width */2] | 0;
        }), 0, specs);
  var children$1 = $$Array.append(children, columns);
  return ReasonReact.wrapJsForReason(ReactVirtualized.Table, {
              headerHeight: 20,
              columnCount: columns.length,
              columnWidth: 200,
              height: 300,
              rowCount: l.length,
              rowHeight: 30,
              width: tableWidth,
              rowGetter: (
  ({index}) => l[index]
  )
            }, children$1);
}

exports.str          = str;
exports.component    = component;
exports.StageSetSpec = StageSetSpec;
exports.StageSet     = StageSet;
exports.makeList     = makeList;
exports.Column       = Column;
exports.rowGetter    = rowGetter;
exports.make         = make$1;
/*  Not a pure module */
