// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Jest         = require("bs-jest/lib/js/src/jest.js");
var List         = require("bs-platform/lib/js/list.js");
var Block        = require("bs-platform/lib/js/block.js");
var Hashtbl      = require("bs-platform/lib/js/hashtbl.js");
var Caml_array   = require("bs-platform/lib/js/caml_array.js");
var ModelBuilder = require("./ModelBuilder.js");

var mappings = /* record */[
  /* spellId */0,
  /* patientId */1,
  /* arrivalDate */2,
  /* arrivalTime */3,
  /* departureDate */4,
  /* departureTime */5,
  /* ward */6,
  /* specialty */7,
  /* consultant */8
];

var row = /* array */[
  "spell",
  "patient",
  "10/08/2017",
  "10:30",
  "10/12/2018",
  "12:30",
  "ward",
  "specialty",
  "consultant"
];

var exampleStage_003 = /* arrival */new Date(2011, 7, 10, 11, 30);

var exampleStage_004 = /* departure : Some */[new Date(2012, 11, 10, 12, 30)];

var exampleStage = /* record */[
  /* id */0,
  /* spellId */"spellId",
  /* patientId */"thePatient",
  exampleStage_003,
  exampleStage_004,
  /* ward */"theWard",
  /* specialty */"theSpecialty",
  /* consultant */"theConsultant"
];

describe("expect buildOne", (function () {
        Jest.test("happy case", (function () {
                var one = ModelBuilder.buildOne(mappings, 1, row);
                var expected = /* Ok */Block.__(0, [/* record */[
                      /* id */1,
                      /* spellId */Caml_array.caml_array_get(row, 0),
                      /* patientId */Caml_array.caml_array_get(row, 1),
                      /* arrival */new Date(2017, 7, 10, 11, 30),
                      /* departure : Some */[new Date(2018, 11, 10, 12, 30)],
                      /* ward */Caml_array.caml_array_get(row, 6),
                      /* specialty */Caml_array.caml_array_get(row, 7),
                      /* consultant */Caml_array.caml_array_get(row, 8)
                    ]]);
                return Jest.Expect[/* toEqual */12](expected, Jest.Expect[/* expect */0](one));
              }));
        Jest.test("bounds are tested", (function () {
                var row = /* array */[];
                var result = ModelBuilder.buildOne(mappings, 1, row);
                if (result.tag) {
                  return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](result[0][/* index */0]));
                } else {
                  return Jest.fail("should have failed");
                }
              }));
        Jest.test("missing spellId is error", (function () {
                var row = /* array */[
                  "",
                  "patient",
                  "10/08/2017",
                  "10:30",
                  "10/12/2018",
                  "12:30",
                  "ward",
                  "specialty",
                  "consultant"
                ];
                var result = ModelBuilder.buildOne(mappings, 1, row);
                if (result.tag) {
                  return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](result[0][/* index */0]));
                } else {
                  return Jest.fail("should have failed");
                }
              }));
        Jest.test("unrecognised date is error", (function () {
                var row = /* array */[
                  "spellId",
                  "patient",
                  "who knows what this is?",
                  "10:30",
                  "10/12/2018",
                  "12:30",
                  "ward",
                  "specialty",
                  "consultant"
                ];
                var result = ModelBuilder.buildOne(mappings, 1, row);
                if (result.tag) {
                  return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](result[0][/* index */0]));
                } else {
                  return Jest.fail("should have failed");
                }
              }));
        Jest.test("missing patientId is error", (function () {
                var row = /* array */[
                  "spellId",
                  "",
                  "10/08/2017",
                  "10:30",
                  "10/12/2018",
                  "12:30",
                  "ward",
                  "specialty",
                  "consultant"
                ];
                var result = ModelBuilder.buildOne(mappings, 1, row);
                if (result.tag) {
                  return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](result[0][/* index */0]));
                } else {
                  return Jest.fail("should have failed");
                }
              }));
        return Jest.test("defaults are used", (function () {
                      var row = /* array */[
                        "spell",
                        "patient",
                        "10/08/2017",
                        "10:30",
                        "10/12/2018",
                        "12:30",
                        "",
                        "",
                        ""
                      ];
                      var result = ModelBuilder.buildOne(mappings, 1, row);
                      var expected = /* Ok */Block.__(0, [/* record */[
                            /* id */1,
                            /* spellId */Caml_array.caml_array_get(row, 0),
                            /* patientId */Caml_array.caml_array_get(row, 1),
                            /* arrival */new Date(2017, 7, 10, 11, 30),
                            /* departure : Some */[new Date(2018, 11, 10, 12, 30)],
                            /* ward */"default ward",
                            /* specialty */"default specialty",
                            /* consultant */"default consultant"
                          ]]);
                      return Jest.Expect[/* toEqual */12](expected, Jest.Expect[/* expect */0](result));
                    }));
      }));

describe("expect build", (function () {
        var rows = /* array */[
          /* array */[
            "spell",
            "patient",
            "10/8/2011",
            "10:30",
            "10/12/2012",
            "12:30",
            "ward",
            "specialty",
            "consultant"
          ],
          /* array */[
            "spell",
            "patient",
            "10/8/2017",
            "10:30",
            "10/12/2018",
            "12:30",
            "ward",
            "specialty",
            "consultant"
          ],
          /* array */[]
        ];
        var result = ModelBuilder.build(mappings, rows);
        Jest.test("parsed stages", (function () {
                return Jest.Expect[/* toBe */2](2, Jest.Expect[/* expect */0](List.length(result[/* stages */0])));
              }));
        Jest.test("failed stages", (function () {
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](List.length(result[/* rejections */1])));
              }));
        var rowOne = Caml_array.caml_array_get(rows, 0);
        var resultOne = List.nth(result[/* stages */0], 0);
        Jest.test("rowOne", (function () {
                return Jest.Expect[/* toEqual */12](/* record */[
                            /* id */0,
                            /* spellId */Caml_array.caml_array_get(rowOne, 0),
                            /* patientId */Caml_array.caml_array_get(rowOne, 1),
                            /* arrival */new Date(2011, 7, 10, 11, 30),
                            /* departure : Some */[new Date(2012, 11, 10, 12, 30)],
                            /* ward */Caml_array.caml_array_get(rowOne, 6),
                            /* specialty */Caml_array.caml_array_get(rowOne, 7),
                            /* consultant */Caml_array.caml_array_get(rowOne, 8)
                          ], Jest.Expect[/* expect */0](resultOne));
              }));
        var rowTwo = Caml_array.caml_array_get(rows, 1);
        var resultTwo = List.nth(result[/* stages */0], 1);
        return Jest.test("rowTwo", (function () {
                      return Jest.Expect[/* toEqual */12](/* record */[
                                  /* id */1,
                                  /* spellId */Caml_array.caml_array_get(rowTwo, 0),
                                  /* patientId */Caml_array.caml_array_get(rowTwo, 1),
                                  /* arrival */new Date(2017, 7, 10, 11, 30),
                                  /* departure : Some */[new Date(2018, 11, 10, 12, 30)],
                                  /* ward */Caml_array.caml_array_get(rowTwo, 6),
                                  /* specialty */Caml_array.caml_array_get(rowTwo, 7),
                                  /* consultant */Caml_array.caml_array_get(rowTwo, 8)
                                ], Jest.Expect[/* expect */0](resultTwo));
                    }));
      }));

describe("collector", (function () {
        var visitOne = "visitOne";
        var visitTwo = "visitTwo";
        var v1r1_003 = /* arrival */new Date(2011, 7, 10);
        var v1r1_004 = /* departure : Some */[new Date(2012, 11, 10)];
        var v1r1 = /* record */[
          /* id */0,
          /* spellId */visitOne,
          /* patientId */"a",
          v1r1_003,
          v1r1_004,
          /* ward */"b",
          /* specialty */"c",
          /* consultant */"d"
        ];
        var newrecord = v1r1.slice();
        newrecord[/* spellId */1] = visitTwo;
        var collection = ModelBuilder.collectBy(/* :: */[
              v1r1,
              /* :: */[
                v1r1,
                /* :: */[
                  newrecord,
                  /* [] */0
                ]
              ]
            ], (function (stage) {
                return stage[/* spellId */1];
              }));
        Jest.test("returned count", (function () {
                return Jest.Expect[/* toBe */2](2, Jest.Expect[/* expect */0](Hashtbl.length(collection)));
              }));
        Jest.test("visit 1", (function () {
                var v1 = Hashtbl.find(collection, visitOne);
                return Jest.Expect[/* toEqual */12](/* :: */[
                            v1r1,
                            /* :: */[
                              v1r1,
                              /* [] */0
                            ]
                          ], Jest.Expect[/* expect */0](v1));
              }));
        return Jest.test("visit 2", (function () {
                      var v2 = Hashtbl.find(collection, visitTwo);
                      return Jest.Expect[/* toEqual */12](/* :: */[
                                  newrecord,
                                  /* [] */0
                                ], Jest.Expect[/* expect */0](v2));
                    }));
      }));

describe("collector - single", (function () {
        var patient1 = "patient1";
        var visitOne = "visitOne";
        var newrecord = exampleStage.slice();
        newrecord[/* spellId */1] = visitOne;
        newrecord[/* patientId */2] = patient1;
        var collection = ModelBuilder.collectByPatientAndVisitNumber(/* :: */[
              newrecord,
              /* [] */0
            ]);
        Jest.test("returned count", (function () {
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](List.length(collection)));
              }));
        return Jest.test("first patient", (function () {
                      return Jest.Expect[/* toEqual */12](/* record */[
                                  /* id */patient1,
                                  /* journeys : :: */[
                                    /* record */[
                                      /* id */visitOne,
                                      /* stages : :: */[
                                        newrecord,
                                        /* [] */0
                                      ]
                                    ],
                                    /* [] */0
                                  ]
                                ], Jest.Expect[/* expect */0](List.nth(collection, 0)));
                    }));
      }));

describe("collector - one patient one visit two stages", (function () {
        var patient1 = "patient1";
        var visitOne = "visitOne";
        var newrecord = exampleStage.slice();
        newrecord[/* spellId */1] = visitOne;
        newrecord[/* patientId */2] = patient1;
        var stage2_003 = exampleStage_003;
        var stage2_004 = exampleStage_004;
        var stage2 = /* record */[
          /* id */0,
          /* spellId */visitOne,
          /* patientId */patient1,
          stage2_003,
          stage2_004,
          /* ward */"theWard",
          /* specialty */"theSpecialty",
          /* consultant */"a different consultant"
        ];
        var collection = ModelBuilder.collectByPatientAndVisitNumber(/* :: */[
              newrecord,
              /* :: */[
                stage2,
                /* [] */0
              ]
            ]);
        Jest.test("returned count", (function () {
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](List.length(collection)));
              }));
        return Jest.test("first patient", (function () {
                      return Jest.Expect[/* toEqual */12](/* record */[
                                  /* id */patient1,
                                  /* journeys : :: */[
                                    /* record */[
                                      /* id */visitOne,
                                      /* stages : :: */[
                                        newrecord,
                                        /* :: */[
                                          stage2,
                                          /* [] */0
                                        ]
                                      ]
                                    ],
                                    /* [] */0
                                  ]
                                ], Jest.Expect[/* expect */0](List.nth(collection, 0)));
                    }));
      }));

describe("collector - one patient two visits one stage", (function () {
        var visitOne = "visitOne";
        var visitTwo = "visitTwo";
        var newrecord = exampleStage.slice();
        newrecord[/* spellId */1] = visitOne;
        newrecord[/* arrival */3] = new Date(2011, 1);
        var newrecord$1 = exampleStage.slice();
        newrecord$1[/* spellId */1] = visitTwo;
        newrecord$1[/* arrival */3] = new Date(2012, 1);
        var collection = ModelBuilder.collectByPatientAndVisitNumber(/* :: */[
              newrecord,
              /* :: */[
                newrecord$1,
                /* [] */0
              ]
            ]);
        Jest.test("returned count", (function () {
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](List.length(collection)));
              }));
        return Jest.test("first patient", (function () {
                      return Jest.Expect[/* toEqual */12](/* record */[
                                  /* id */"thePatient",
                                  /* journeys : :: */[
                                    /* record */[
                                      /* id */visitOne,
                                      /* stages : :: */[
                                        newrecord,
                                        /* [] */0
                                      ]
                                    ],
                                    /* :: */[
                                      /* record */[
                                        /* id */visitTwo,
                                        /* stages : :: */[
                                          newrecord$1,
                                          /* [] */0
                                        ]
                                      ],
                                      /* [] */0
                                    ]
                                  ]
                                ], Jest.Expect[/* expect */0](List.nth(collection, 0)));
                    }));
      }));

describe("collector - one patient two visits two stages", (function () {
        var visitOne = "visitOne";
        var visitTwo = "visitTwo";
        var v1s1_003 = /* arrival */new Date(2011, 1);
        var v1s1_004 = exampleStage_004;
        var v1s1 = /* record */[
          /* id */1,
          /* spellId */visitOne,
          /* patientId */"thePatient",
          v1s1_003,
          v1s1_004,
          /* ward */"theWard",
          /* specialty */"theSpecialty",
          /* consultant */"theConsultant"
        ];
        var v1s2_003 = /* arrival */new Date(2012, 1);
        var v1s2_004 = exampleStage_004;
        var v1s2 = /* record */[
          /* id */2,
          /* spellId */visitOne,
          /* patientId */"thePatient",
          v1s2_003,
          v1s2_004,
          /* ward */"theWard",
          /* specialty */"theSpecialty",
          /* consultant */"theConsultant"
        ];
        var v2s1_003 = /* arrival */new Date(2013, 1);
        var v2s1_004 = exampleStage_004;
        var v2s1 = /* record */[
          /* id */3,
          /* spellId */visitTwo,
          /* patientId */"thePatient",
          v2s1_003,
          v2s1_004,
          /* ward */"theWard",
          /* specialty */"theSpecialty",
          /* consultant */"theConsultant"
        ];
        var v2s2_003 = /* arrival */new Date(2014, 1);
        var v2s2_004 = exampleStage_004;
        var v2s2 = /* record */[
          /* id */4,
          /* spellId */visitTwo,
          /* patientId */"thePatient",
          v2s2_003,
          v2s2_004,
          /* ward */"theWard",
          /* specialty */"theSpecialty",
          /* consultant */"theConsultant"
        ];
        var collection = ModelBuilder.collectByPatientAndVisitNumber(/* :: */[
              v1s1,
              /* :: */[
                v1s2,
                /* :: */[
                  v2s1,
                  /* :: */[
                    v2s2,
                    /* [] */0
                  ]
                ]
              ]
            ]);
        Jest.test("returned count", (function () {
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](List.length(collection)));
              }));
        return Jest.test("first patient", (function () {
                      return Jest.Expect[/* toEqual */12](/* record */[
                                  /* id */"thePatient",
                                  /* journeys : :: */[
                                    /* record */[
                                      /* id */visitOne,
                                      /* stages : :: */[
                                        v1s1,
                                        /* :: */[
                                          v1s2,
                                          /* [] */0
                                        ]
                                      ]
                                    ],
                                    /* :: */[
                                      /* record */[
                                        /* id */visitTwo,
                                        /* stages : :: */[
                                          v2s1,
                                          /* :: */[
                                            v2s2,
                                            /* [] */0
                                          ]
                                        ]
                                      ],
                                      /* [] */0
                                    ]
                                  ]
                                ], Jest.Expect[/* expect */0](List.nth(collection, 0)));
                    }));
      }));

exports.mappings     = mappings;
exports.row          = row;
exports.exampleStage = exampleStage;
/* exampleStage Not a pure module */
