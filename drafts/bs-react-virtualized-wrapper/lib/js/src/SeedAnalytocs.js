// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Set       = require("bs-platform/lib/js/set.js");
var Json        = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var List        = require("bs-platform/lib/js/list.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Fetch       = require("bs-fetch/lib/js/src/Fetch.js");
var React       = require("react");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var JsonEncoder = require("./JsonEncoder.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

var server = "https://demo.qfi-pride-and-joy.com/max-app";

function str(prim) {
  return prim;
}

var compare = Caml_string.caml_string_compare;

var StringSetSpec = /* module */[/* compare */compare];

function startSeeding(_, nextCb) {
  var promise = fetch("https://demo.qfi-pride-and-joy.com/max-app/analytocs/api/seeder/start.json", Fetch.RequestInit[/* make */0](/* Some */[/* Post */2], /* Some */[/* array */[/* tuple */[
                      "Content-type",
                      "application/json"
                    ]]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0)).then((function (prim) {
            return prim.text();
          })).then((function (text) {
          return Promise.resolve((console.log(text), Curry._1(nextCb, /* () */0)));
        }));
  Promise.resolve(promise);
  return /* () */0;
}

var StringSet = $$Set.Make(StringSetSpec);

function extractReferenceData(patients) {
  var locations = [StringSet[/* empty */0]];
  var consultants = [StringSet[/* empty */0]];
  var categories = [StringSet[/* empty */0]];
  console.log("capturing reference data");
  $$Array.iter((function (patient) {
          return List.iter((function (journey) {
                        return List.iter((function (stage) {
                                      locations[0] = Curry._2(StringSet[/* add */3], stage[/* ward */5], locations[0]);
                                      consultants[0] = Curry._2(StringSet[/* add */3], stage[/* consultant */7], consultants[0]);
                                      categories[0] = Curry._2(StringSet[/* add */3], stage[/* specialty */6], categories[0]);
                                      return /* () */0;
                                    }), journey[/* stages */1]);
                      }), patient[/* journeys */1]);
        }), patients);
  var json = Json_encode.object_(/* :: */[
        /* tuple */[
          "locations",
          $$Array.of_list(Curry._1(StringSet[/* elements */19], locations[0]))
        ],
        /* :: */[
          /* tuple */[
            "consultants",
            $$Array.of_list(Curry._1(StringSet[/* elements */19], consultants[0]))
          ],
          /* :: */[
            /* tuple */[
              "specialties",
              $$Array.of_list(Curry._1(StringSet[/* elements */19], categories[0]))
            ],
            /* [] */0
          ]
        ]
      ]);
  console.log("captured reference data", json);
  return json;
}

function pushReferenceData(self, patients, nextCb) {
  Curry._1(self[/* send */4], /* PushReferenceData */1);
  var json = Json.stringify(extractReferenceData(patients));
  var promise = fetch("https://demo.qfi-pride-and-joy.com/max-app/analytocs/api/seeder/reference-data.json", Fetch.RequestInit[/* make */0](/* Some */[/* Post */2], /* Some */[/* array */[/* tuple */[
                      "Content-type",
                      "application/json"
                    ]]], /* Some */[json], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0)).then((function (prim) {
            return prim.text();
          })).then((function (text) {
          return Promise.resolve((console.log(text), Curry._1(nextCb, /* () */0)));
        }));
  Promise.resolve(promise);
  return /* () */0;
}

function pushPatients(self, i, patients) {
  var nextChunkIndex = Pervasives.min(i + 50 | 0, patients.length);
  var patientsChunk = $$Array.sub(patients, i, nextChunkIndex - i | 0);
  var patientsJson = JsonEncoder.encodePatients($$Array.to_list(patientsChunk));
  var patientsStr = Json.stringify(patientsJson);
  var promise = fetch("https://demo.qfi-pride-and-joy.com/max-app/analytocs/api/seeder/patients.json", Fetch.RequestInit[/* make */0](/* Some */[/* Post */2], /* Some */[/* array */[/* tuple */[
                      "Content-type",
                      "application/json"
                    ]]], /* Some */[patientsStr], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0)).then((function (prim) {
            return prim.text();
          })).then((function (text) {
          return Promise.resolve((console.log(text), nextChunkIndex < patients.length ? (Curry._1(self[/* send */4], /* PushedPatient */[nextChunkIndex]), pushPatients(self, nextChunkIndex, patients)) : Curry._1(self[/* send */4], /* Finish */2)));
        }));
  Promise.resolve(promise);
  return /* () */0;
}

function seed(self, patients) {
  var patients$1 = $$Array.of_list(patients);
  Curry._1(self[/* send */4], /* Start */0);
  return startSeeding(self, (function () {
                return pushReferenceData(self, patients$1, (function () {
                              return pushPatients(self, 0, patients$1);
                            }));
              }));
}

var component = ReasonReact.reducerComponent("SeedAnalytocs");

function make(patients, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var match = self[/* state */2][/* status */0];
      var tmp;
      if (typeof match === "number") {
        switch (match) {
          case 0 : 
              tmp = React.createElement("div", {
                    onClick: (function () {
                        return seed(self, patients);
                      })
                  }, "Click to publish " + (Pervasives.string_of_int(List.length(patients)) + " patients to https://demo.qfi-pride-and-joy.com/max-app"));
              break;
          case 1 : 
              tmp = "Preparing the seed on the server";
              break;
          case 2 : 
              tmp = "Pushing the reference data";
              break;
          case 3 : 
              tmp = React.createElement("div", {
                    onClick: (function () {
                        return seed(self, patients);
                      })
                  }, "Seeding complete - click to start again");
              break;
          
        }
      } else {
        tmp = "Processed " + (Pervasives.string_of_int(match[0]) + (" of " + Pervasives.string_of_int(List.length(patients))));
      }
      return React.createElement("div", undefined, tmp);
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* status : NotStarted */0];
    });
  newrecord[/* reducer */12] = (function (action, _) {
      if (typeof action === "number") {
        switch (action) {
          case 0 : 
              return /* Update */Block.__(0, [/* record */[/* status : SeedingStarted */1]]);
          case 1 : 
              return /* Update */Block.__(0, [/* record */[/* status : PushingReferenceData */2]]);
          case 2 : 
              return /* Update */Block.__(0, [/* record */[/* status : Finished */3]]);
          
        }
      } else {
        return /* Update */Block.__(0, [/* record */[/* status : CompletedPatient */[action[0]]]]);
      }
    });
  return newrecord;
}

var patientBatchSize = 50;

exports.server               = server;
exports.patientBatchSize     = patientBatchSize;
exports.str                  = str;
exports.StringSetSpec        = StringSetSpec;
exports.startSeeding         = startSeeding;
exports.StringSet            = StringSet;
exports.extractReferenceData = extractReferenceData;
exports.pushReferenceData    = pushReferenceData;
exports.pushPatients         = pushPatients;
exports.seed                 = seed;
exports.component            = component;
exports.make                 = make;
/* StringSet Not a pure module */
