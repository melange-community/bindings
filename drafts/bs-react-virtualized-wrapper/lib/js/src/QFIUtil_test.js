// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Jest    = require("bs-jest/lib/js/src/jest.js");
var Curry   = require("bs-platform/lib/js/curry.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var QFIUtil = require("./QFIUtil.js");

describe("parseDate", (function () {
        Jest.test("emptyString", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](QFIUtil.parseDate("")));
              }));
        return Jest.test("dd/mm/yyyy", (function () {
                      var date = new Date(2017, 10, 3);
                      return Jest.Expect[/* toEqual */12](/* Some */[date], Jest.Expect[/* expect */0](QFIUtil.parseDate("03/11/2017")));
                    }));
      }));

describe("parseDateTime", (function () {
        Jest.test("happy case", (function () {
                var date = new Date(2017, 10, 3, 10, 30);
                return Jest.Expect[/* toEqual */12](/* Some */[date], Jest.Expect[/* expect */0](QFIUtil.parseDateTime("03/11/2017", "10:30")));
              }));
        Jest.test("invalid date and valid date errors", (function () {
                var match = QFIUtil.parseDateTime("", "10:30");
                if (match) {
                  return Jest.fail("should have failed to parse");
                } else {
                  return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](1));
                }
              }));
        return Jest.test("valid date and invalid date errors", (function () {
                      var match = QFIUtil.parseDateTime("03/11/2017", "");
                      if (match) {
                        return Jest.fail("should have failed to parse");
                      } else {
                        return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](1));
                      }
                    }));
      }));

function collectBy(theList, f) {
  var FinallyItWorks = QFIUtil.Collector[/* Make */0](/* module */[
        /* l */theList,
        /* f */f
      ]);
  return Curry._3(FinallyItWorks[/* collect */0], /* None */0, /* None */0, /* () */0);
}

var CollectByState = /* module */[/* collectBy */collectBy];

describe("collect-empty", (function () {
        return Jest.test("happy", (function () {
                      return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](Hashtbl.length(collectBy(/* [] */0, (function (x) {
                                                return x[/* a */0];
                                              })))));
                    }));
      }));

describe("collect", (function () {
        var a11 = /* record */[
          /* a */1,
          /* b */10
        ];
        var a12 = /* record */[
          /* a */1,
          /* b */1
        ];
        var a21 = /* record */[
          /* a */2,
          /* b */30
        ];
        var result = collectBy(/* :: */[
              a11,
              /* :: */[
                a12,
                /* :: */[
                  a21,
                  /* [] */0
                ]
              ]
            ], (function (x) {
                return x[/* a */0];
              }));
        Jest.test("length", (function () {
                return Jest.Expect[/* toBe */2](2, Jest.Expect[/* expect */0](Hashtbl.length(result)));
              }));
        Jest.test("group 1", (function () {
                return Jest.Expect[/* toEqual */12](/* :: */[
                            a12,
                            /* :: */[
                              a11,
                              /* [] */0
                            ]
                          ], Jest.Expect[/* expect */0](Hashtbl.find(result, 1)));
              }));
        return Jest.test("group 2", (function () {
                      return Jest.Expect[/* toEqual */12](/* :: */[
                                  a21,
                                  /* [] */0
                                ], Jest.Expect[/* expect */0](Hashtbl.find(result, 2)));
                    }));
      }));

exports.CollectByState = CollectByState;
/*  Not a pure module */
