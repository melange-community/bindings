// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List             = require("bs-platform/lib/js/list.js");
var $$Array          = require("bs-platform/lib/js/array.js");
var Caml_array       = require("bs-platform/lib/js/caml_array.js");
var ReasonReact      = require("reason-react/lib/js/src/ReasonReact.js");
var ReactVirtualized = require("react-virtualized");

((require('react-virtualized/styles.css')));

function str(prim) {
  return prim;
}

var component = ReasonReact.statelessComponent("Column");

function make(spec, children) {
  return ReasonReact.wrapJsForReason(ReactVirtualized.Column, {
              label: spec[/* label */0],
              dataKey: spec[/* dataKey */1],
              width: spec[/* width */2]
            }, children);
}

var Column = /* module */[
  /* component */component,
  /* make */make
];

function Make(RS) {
  var make$1 = function (spec, children) {
    var specs = spec[/* columnSpecs */4];
    var columns = List.map((function (spec) {
            return ReasonReact.element(/* None */0, /* None */0, make(spec, /* array */[]));
          }), specs);
    var tableWidth = List.fold_left((function (w, spec) {
            return w + spec[/* width */2] | 0;
          }), 0, specs);
    var rowGetter = function (a) {
      return Caml_array.caml_array_get(RS[/* rows */0], a.index);
    };
    var children$1 = $$Array.append(children, $$Array.of_list(columns));
    return ReasonReact.wrapJsForReason(ReactVirtualized.Table, {
                headerHeight: spec[/* headerHeight */0],
                columnCount: List.length(columns),
                columnWidth: spec[/* columnWidth */1],
                height: spec[/* height */2],
                rowCount: RS[/* rows */0].length,
                rowHeight: spec[/* rowHeight */3],
                width: tableWidth,
                rowGetter: rowGetter
              }, children$1);
  };
  var Table = /* module */[/* make */make$1];
  return /* module */[/* Table */Table];
}

exports.str    = str;
exports.Column = Column;
exports.Make   = Make;
/*  Not a pure module */
