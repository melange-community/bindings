// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

function str(prim) {
  return prim;
}

var consumeFile = (
                  function (f, cb) {
                    console.log("starting upload at", (new Date()));
                    var reader = new FileReader();
                    reader.onload = function(theFile) {
                      console.log("finished upload at", (new Date()));
                      var text = reader.result;
                      var papa = require("papaparse");
                      console.log("parsing...", (new Date()));
                      var csv = papa.parse(text);
                      console.log("finished parsing at", (new Date()));
                      console.log(csv);
                      // MUTATING
                      var headers = csv.data.shift();
                      var rows = csv.data; // now the columns are removed

                      /* rows = rows.splice(0, 10); */
                      cb(headers, rows);
                    };
                    reader.readAsText(f);
                  }
                 );

function parse(cb, files) {
  console.log(files);
  var file = Caml_array.caml_array_get(files, 0);
  console.log("starting to consume file");
  return Curry._2(consumeFile, file, (function (headers, rows) {
                console.log("headers:", headers);
                return Curry._1(cb, /* Success */Block.__(0, [/* record */[
                                /* columnNames */headers,
                                /* rows */rows
                              ]]));
              }));
}

var component = ReasonReact.reducerComponent("CSVLoader");

var defaultState = /* record */[
  /* parsingResult : None */0,
  /* isLoading : false */0
];

function statusCmp(state) {
  var csvParsingResult = state[/* parsingResult */0];
  var match = state[/* isLoading */1];
  if (match !== 0) {
    return "Loading...";
  } else if (csvParsingResult) {
    var match$1 = csvParsingResult[0];
    if (match$1.tag) {
      return "Something went really wrong:" + match$1[0];
    } else {
      return "File has been parsed";
    }
  } else {
    return "please select the file";
  }
}

function make(cb, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", undefined, React.createElement("input", {
                      type: "file",
                      onChange: (function ($$event) {
                          parse((function (x) {
                                  console.log("called with the contents");
                                  Curry._1(self[/* send */4], /* ConsumeCSV */[x]);
                                  var tmp;
                                  tmp = x.tag ? /* record */[
                                      /* columnNames : array */[],
                                      /* rows : array */[]
                                    ] : x[0];
                                  return Curry._1(cb, tmp);
                                }), $$event.target.files);
                          return Curry._1(self[/* send */4], /* Loading */0);
                        })
                    }), statusCmp(self[/* state */2]));
    });
  newrecord[/* initialState */10] = (function () {
      return defaultState;
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action) {
        return /* Update */Block.__(0, [/* record */[
                    /* parsingResult : Some */[action[0]],
                    /* isLoading : false */0
                  ]]);
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* parsingResult */state[/* parsingResult */0],
                    /* isLoading : true */1
                  ]]);
      }
    });
  return newrecord;
}

exports.str          = str;
exports.consumeFile  = consumeFile;
exports.parse        = parse;
exports.component    = component;
exports.defaultState = defaultState;
exports.statusCmp    = statusCmp;
exports.make         = make;
/* consumeFile Not a pure module */
