// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List               = require("bs-platform/lib/js/list.js");
var $$Array            = require("bs-platform/lib/js/array.js");
var Block              = require("bs-platform/lib/js/block.js");
var Curry              = require("bs-platform/lib/js/curry.js");
var React              = require("react");
var Analysis           = require("./Analysis.js");
var CSVParser          = require("./CSVParser.js");
var Pervasives         = require("bs-platform/lib/js/pervasives.js");
var ReasonReact        = require("reason-react/lib/js/src/ReasonReact.js");
var ModelBuilder       = require("./ModelBuilder.js");
var ClientSpecificHack = require("./ClientSpecificHack.js");

function str(prim) {
  return prim;
}

var component = ReasonReact.statelessComponent("Fields");

function make(columnNames, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      var items = $$Array.map((function (x) {
              return React.createElement("option", {
                          value: x
                        }, x);
            }), columnNames);
      return ReasonReact.createDomElement("select", {
                  className: "woop"
                }, items);
    });
  return newrecord;
}

var FieldChooser = /* module */[
  /* component */component,
  /* make */make
];

var component$1 = ReasonReact.reducerComponent("Wizard");

var defaultState = /* record */[
  /* parsedCsv : None */0,
  /* model : None */0
];

function statusCmp(state) {
  var match = state[/* parsedCsv */0];
  if (match) {
    return ReasonReact.element(/* None */0, /* None */0, make(match[0][/* columnNames */0], /* array */[]));
  } else {
    return "please select the file";
  }
}

function analysersCmp(model) {
  if (model) {
    var elements = ModelBuilder.collectByPatientAndVisitNumber(model[0][/* stages */0]);
    return ReasonReact.element(/* None */0, /* None */0, Analysis.PatientsAnalser[/* make */1](elements, /* array */[]));
  } else {
    return null;
  }
}

function make$1() {
  var newrecord = component$1.slice();
  newrecord[/* render */9] = (function (self) {
      var match = self[/* state */2][/* model */1];
      var tmp;
      if (match) {
        var model = match[0];
        tmp = React.createElement("div", undefined, React.createElement("p", undefined, "There are " + (Pervasives.string_of_int(List.length(model[/* stages */0])) + " stages")), React.createElement("p", undefined, "There are " + (Pervasives.string_of_int(List.length(model[/* rejections */1])) + " failures")));
      } else {
        tmp = null;
      }
      return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, CSVParser.make((function (x) {
                            return Curry._1(self[/* send */4], /* HandleParsedCSV */Block.__(0, [x]));
                          }), /* array */[])), statusCmp(self[/* state */2]), tmp, analysersCmp(self[/* state */2][/* model */1]));
    });
  newrecord[/* initialState */10] = (function () {
      return defaultState;
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action.tag) {
        return /* Update */Block.__(0, [/* record */[
                    /* parsedCsv */state[/* parsedCsv */0],
                    /* model : Some */[action[0]]
                  ]]);
      } else {
        var result = action[0];
        return /* UpdateWithSideEffects */Block.__(3, [
                  /* record */[
                    /* parsedCsv : Some */[result],
                    /* model */state[/* model */1]
                  ],
                  (function (self) {
                      return Curry._1(self[/* send */4], /* ConsumeModel */Block.__(1, [ModelBuilder.build(ClientSpecificHack.mappings, result[/* rows */1])]));
                    })
                ]);
      }
    });
  return newrecord;
}

exports.str          = str;
exports.FieldChooser = FieldChooser;
exports.component    = component$1;
exports.defaultState = defaultState;
exports.statusCmp    = statusCmp;
exports.analysersCmp = analysersCmp;
exports.make         = make$1;
/* component Not a pure module */
