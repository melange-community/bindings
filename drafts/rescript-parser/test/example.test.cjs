// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Char = require("rescript/lib/js/char.js");
var Res_parser = require("../src/res_parser.cjs");
var Caml_format = require("rescript/lib/js/caml_format.js");

var sign = Res_parser.choice([
      Res_parser.map(Res_parser.$$char(/* '+' */43), (function (param) {
              return /* Plus */0;
            })),
      Res_parser.map(Res_parser.$$char(/* '-' */45), (function (param) {
              return /* Subtract */1;
            })),
      Res_parser.map(Res_parser.$$char(/* 'x' */120), (function (param) {
              return /* Multiply */2;
            }))
    ]);

var manyWhitespace = Res_parser.many(Res_parser.anyOf([
          /* ' ' */32,
          /* '\n' */10
        ]));

var singleDigit = Res_parser.between(Res_parser.map(Res_parser.map(Res_parser.map(Res_parser.satisfy(function ($$char) {
                      if ($$char >= /* '0' */48) {
                        return $$char <= /* '9' */57;
                      } else {
                        return false;
                      }
                    }), Char.escaped), Caml_format.caml_int_of_string), (function (x) {
            return /* SingleDigit */{
                    _0: x
                  };
          })), manyWhitespace, manyWhitespace);

var parser = Res_parser.map(Res_parser.andThen(Res_parser.andThen(singleDigit, sign), singleDigit), (function (param) {
        var match = param[0];
        return /* Expression */{
                _0: match[0],
                _1: match[1],
                _2: param[1]
              };
      }));

var result = Res_parser.run(parser, " 1 +  4  ");

Ava.test("[Example.test] success", (function (t) {
        if (result.TAG !== /* Ok */0) {
          return Ava.fail(t, result._0.message, undefined);
        }
        var match = result._0;
        var e = match[0];
        if (e._0._0 === 1 && e._1 === 0 && e._2._0 === 4 && Res_parser.State.remaining(match[1]) === "") {
          return Ava.pass(t, undefined, undefined);
        }
        console.log(e);
        return Ava.fail(t, "Succeeded with \"" + Res_parser.State.remaining(match[1]) + "\"", undefined);
      }));

Ava.test("[Example.test] error", (function (t) {
        var error = Res_parser.run(parser, "\n  \n  \n  \n  \n  \n  \n  1\n  \n  \n  ++ e");
        if (error.TAG === /* Ok */0) {
          return Ava.fail(t, "Shouldn't succeed", undefined);
        } else {
          return Ava.pass(t, error._0.message, undefined);
        }
      }));

var P;

exports.P = P;
exports.sign = sign;
exports.manyWhitespace = manyWhitespace;
exports.singleDigit = singleDigit;
exports.parser = parser;
exports.result = result;
/* sign Not a pure module */
