// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Test_runners = require("../test_runners.cjs");
var Simple_sexp_parser = require("./simple_sexp_parser.cjs");

Ava.test("[Sexps] Char list to string", (function (t) {
        return Ava.is(t, Simple_sexp_parser.charListToString({
                        hd: /* 'h' */104,
                        tl: {
                          hd: /* 'e' */101,
                          tl: {
                            hd: /* 'l' */108,
                            tl: {
                              hd: /* 'l' */108,
                              tl: {
                                hd: /* 'o' */111,
                                tl: /* [] */0
                              }
                            }
                          }
                        }
                      }), "hello", undefined, undefined);
      }));

Test_runners.runTests(Simple_sexp_parser.parser, (function (input, param) {
        return "[Sexps.Simple] String \"" + input + "\"";
      }), [
      [
        "\"\"",
        {
          TAG: /* String */1,
          _0: ""
        },
        ""
      ],
      [
        "\"hello\"",
        {
          TAG: /* String */1,
          _0: "hello"
        },
        ""
      ],
      [
        "    \"  he ll   o  \"",
        {
          TAG: /* String */1,
          _0: "  he ll   o  "
        },
        ""
      ]
    ]);

Test_runners.runTests(Simple_sexp_parser.parser, (function (input, param) {
        return "[Sexps.Simple] Int \"" + input + "\"";
      }), [
      [
        "1",
        {
          TAG: /* Int */0,
          _0: "1"
        },
        ""
      ],
      [
        "    4",
        {
          TAG: /* Int */0,
          _0: "4"
        },
        ""
      ],
      [
        "192",
        {
          TAG: /* Int */0,
          _0: "192"
        },
        ""
      ],
      [
        "  8671109    ",
        {
          TAG: /* Int */0,
          _0: "8671109"
        },
        ""
      ],
      [
        "-991344",
        {
          TAG: /* Int */0,
          _0: "-991344"
        },
        ""
      ],
      [
        "    -9     ",
        {
          TAG: /* Int */0,
          _0: "-9"
        },
        ""
      ]
    ]);

Test_runners.runTests(Simple_sexp_parser.parser, (function (input, param) {
        return "[Sexps.Simple] Exp \"" + input + "\"";
      }), [
      [
        "()",
        {
          TAG: /* Exp */2,
          _0: /* [] */0
        },
        ""
      ],
      [
        "( )",
        {
          TAG: /* Exp */2,
          _0: /* [] */0
        },
        ""
      ],
      [
        "(1)",
        {
          TAG: /* Exp */2,
          _0: {
            hd: {
              TAG: /* Int */0,
              _0: "1"
            },
            tl: /* [] */0
          }
        },
        ""
      ],
      [
        " (       1 )\n\n  ",
        {
          TAG: /* Exp */2,
          _0: {
            hd: {
              TAG: /* Int */0,
              _0: "1"
            },
            tl: /* [] */0
          }
        },
        ""
      ],
      [
        "(1 \"2\" 3)",
        {
          TAG: /* Exp */2,
          _0: {
            hd: {
              TAG: /* Int */0,
              _0: "1"
            },
            tl: {
              hd: {
                TAG: /* String */1,
                _0: "2"
              },
              tl: {
                hd: {
                  TAG: /* Int */0,
                  _0: "3"
                },
                tl: /* [] */0
              }
            }
          }
        },
        ""
      ],
      [
        "    (  1  \"2\"     3  )  ",
        {
          TAG: /* Exp */2,
          _0: {
            hd: {
              TAG: /* Int */0,
              _0: "1"
            },
            tl: {
              hd: {
                TAG: /* String */1,
                _0: "2"
              },
              tl: {
                hd: {
                  TAG: /* Int */0,
                  _0: "3"
                },
                tl: /* [] */0
              }
            }
          }
        },
        ""
      ],
      [
        "(1 (\"2\" 3))",
        {
          TAG: /* Exp */2,
          _0: {
            hd: {
              TAG: /* Int */0,
              _0: "1"
            },
            tl: {
              hd: {
                TAG: /* Exp */2,
                _0: {
                  hd: {
                    TAG: /* String */1,
                    _0: "2"
                  },
                  tl: {
                    hd: {
                      TAG: /* Int */0,
                      _0: "3"
                    },
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        },
        ""
      ],
      [
        "\n  (     1(\"2\"3) )       ",
        {
          TAG: /* Exp */2,
          _0: {
            hd: {
              TAG: /* Int */0,
              _0: "1"
            },
            tl: {
              hd: {
                TAG: /* Exp */2,
                _0: {
                  hd: {
                    TAG: /* String */1,
                    _0: "2"
                  },
                  tl: {
                    hd: {
                      TAG: /* Int */0,
                      _0: "3"
                    },
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        },
        ""
      ],
      [
        "\n  (     1(\"2\"(3 (1 (())))) )       ",
        {
          TAG: /* Exp */2,
          _0: {
            hd: {
              TAG: /* Int */0,
              _0: "1"
            },
            tl: {
              hd: {
                TAG: /* Exp */2,
                _0: {
                  hd: {
                    TAG: /* String */1,
                    _0: "2"
                  },
                  tl: {
                    hd: {
                      TAG: /* Exp */2,
                      _0: {
                        hd: {
                          TAG: /* Int */0,
                          _0: "3"
                        },
                        tl: {
                          hd: {
                            TAG: /* Exp */2,
                            _0: {
                              hd: {
                                TAG: /* Int */0,
                                _0: "1"
                              },
                              tl: {
                                hd: {
                                  TAG: /* Exp */2,
                                  _0: {
                                    hd: {
                                      TAG: /* Exp */2,
                                      _0: /* [] */0
                                    },
                                    tl: /* [] */0
                                  }
                                },
                                tl: /* [] */0
                              }
                            }
                          },
                          tl: /* [] */0
                        }
                      }
                    },
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        },
        ""
      ]
    ]);

var P;

var Simple;

exports.P = P;
exports.Simple = Simple;
/*  Not a pure module */
