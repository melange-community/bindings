// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as FingerTree from "./impl/FingerTree.mjs";
import * as Caml_option from "@rescript/std/lib/es6/caml_option.js";

var pushFront = FingerTree.pushl;

var pushBack = FingerTree.pushr;

function popFront(tree) {
  var match = FingerTree.viewl(tree);
  if (match) {
    return match._1;
  } else {
    return /* Empty */0;
  }
}

function popBack(tree) {
  var match = FingerTree.viewr(tree);
  if (match) {
    return match._1;
  } else {
    return /* Empty */0;
  }
}

function peekFront(tree) {
  var match = FingerTree.viewl(tree);
  if (match) {
    return Caml_option.some(match._0);
  }
  
}

function peekBack(tree) {
  var match = FingerTree.viewr(tree);
  if (match) {
    return Caml_option.some(match._0);
  }
  
}

function toArray_aux(tree) {
  if (typeof tree === "number") {
    return [];
  } else if (tree.TAG === /* Single */0) {
    return FingerTree.fromNode(tree._0);
  } else {
    return Belt_Array.flatMap(Belt_Array.concatMany([
                    FingerTree.fromDigit(tree._0),
                    toArray_aux(tree._1),
                    FingerTree.fromDigit(tree._2)
                  ]), FingerTree.fromNode);
  }
}

function toArray(tree) {
  if (typeof tree === "number") {
    return [];
  } else if (tree.TAG === /* Single */0) {
    return [tree._0];
  } else {
    return Belt_Array.concatMany([
                FingerTree.fromDigit(tree._0),
                toArray_aux(tree._1),
                FingerTree.fromDigit(tree._2)
              ]);
  }
}

var empty = /* Empty */0;

export {
  empty ,
  pushFront ,
  pushBack ,
  popFront ,
  popBack ,
  peekFront ,
  peekBack ,
  toArray ,
}
/* No side effect */
