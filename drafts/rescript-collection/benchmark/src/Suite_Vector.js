// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mori from "mori";
import * as Vector from "rescript-vector/src/Vector.js";
import * as Immutable from "immutable";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as ImmutableJs$Benchmark from "./bindings/ImmutableJs.js";

var ar1k = Belt_Array.range(1, 1000);

var ar10k = Belt_Array.range(1, 10000);

var v10k = Vector.fromArray(ar10k);

var l10k = Immutable.List(ar10k);

var m10k = Mori.into(Mori.vector(), ar10k);

var setup = "let ar10k = A.range(1, 10000)";

var benchmarks = [
  {
    name: "Vector.fromArray",
    code: "Vector.fromArray(ar10k)",
    f: (function () {
        return Vector.fromArray(ar10k);
      })
  },
  {
    name: "ImmutableJs.List.fromArray",
    code: "ImmutableJs.List.fromArray(ar10k)",
    f: (function () {
        return Immutable.List(ar10k);
      })
  },
  {
    name: "Mori.into",
    code: "Mori.into(Mori.vector(), ar10k)",
    f: (function () {
        return Mori.into(Mori.vector(), ar10k);
      })
  }
];

var suite = {
  name: "Create (from array)",
  setup: setup,
  benchmarks: benchmarks
};

var Create = {
  n: 10000,
  setup: setup,
  benchmarks: benchmarks,
  suite: suite
};

var setup$1 = "let ar10k = A.range(1, 10000)\n\nlet v = Vector.fromArray(ar10k)\nlet l = ImmutableJs.List.fromArray(ar10k)\nlet m = Mori.into(Mori.vector(), ar10k)";

var benchmarks$1 = [
  {
    name: "Vector.toArray",
    code: "Vector.toArray(v)",
    f: (function () {
        return Vector.toArray(v10k);
      })
  },
  {
    name: "ImmutableJs.List.toArray",
    code: "ImmutableJs.List.toArray(l)",
    f: (function () {
        return l10k.toArray();
      })
  },
  {
    name: "Mori.intoArray",
    code: "Mori.intoArray(m)",
    f: (function () {
        return Mori.intoArray(m10k);
      })
  }
];

var suite$1 = {
  name: "Convert (to array)",
  setup: setup$1,
  benchmarks: benchmarks$1
};

var Convert = {
  setup: setup$1,
  benchmarks: benchmarks$1,
  suite: suite$1
};

var setup$2 = "let ar1k = A.range(1, 1000)";

var suite_benchmarks = [
  {
    name: "Vector.push",
    code: "// Let ReScript compiler doesn't eschew wrapper function.\nA.reduce(ar1k, Vector.make(), (v, i) => Vector.push(v, i + 0))",
    f: (function () {
        return Belt_Array.reduce(ar1k, Vector.make(undefined), (function (v, i) {
                      return Vector.push(v, i + 0 | 0);
                    }));
      })
  },
  {
    name: "ImmutableJs.List.push",
    code: "A.reduce(ar1k, ImmutableJs.List.make(), (l, i) => ImmutableJs.List.push(l, i))",
    f: (function () {
        return Belt_Array.reduce(ar1k, new Immutable.List(), (function (l, i) {
                      return l.push(i);
                    }));
      })
  },
  {
    name: "mori.conj",
    code: "A.reduce(ar1k, Mori.vector(), (v, i) => Mori.conj(v, i))",
    f: (function () {
        return Belt_Array.reduce(ar1k, Mori.vector(), (function (v, i) {
                      return Mori.conj(v, i);
                    }));
      })
  }
];

var suite$2 = {
  name: "Push",
  setup: setup$2,
  benchmarks: suite_benchmarks
};

var Push = {
  setup: setup$2,
  suite: suite$2
};

var v1k = Vector.fromArray(ar1k);

var l1k = Immutable.List(ar1k);

var m1k = Mori.into(Mori.vector(), ar1k);

var setup$3 = "let ar1k = A.range(1, 1000)\n\nlet v1k = Vector.fromArray(ar1k)\nlet l1k = ImmutableJs.List.fromArray(ar1k)\nlet m1k = Mori.into(Mori.vector(), ar1k)\n";

var suite_benchmarks$1 = [
  {
    name: "Vector.push",
    code: "A.reduce(ar1k, v1k, (v, _) => Vector.pop(v))",
    f: (function () {
        return Belt_Array.reduce(ar1k, v1k, (function (v, param) {
                      return Vector.pop(v);
                    }));
      })
  },
  {
    name: "ImmutableJs.List.push",
    code: "A.reduce(ar1k, l1k, (l, _) => ImmutableJs.List.pop(l))",
    f: (function () {
        return Belt_Array.reduce(ar1k, l1k, (function (l, param) {
                      return l.pop();
                    }));
      })
  },
  {
    name: "mori.conj",
    code: "A.reduce(ar1k, m1k, (m, _) => Mori.pop(m))",
    f: (function () {
        return Belt_Array.reduce(ar1k, m1k, (function (m, param) {
                      return Mori.pop(m);
                    }));
      })
  }
];

var suite$3 = {
  name: "Pop",
  setup: setup$3,
  benchmarks: suite_benchmarks$1
};

var Pop = {
  v1k: v1k,
  l1k: l1k,
  m1k: m1k,
  setup: setup$3,
  suite: suite$3
};

var v0 = Belt_Array.makeBy(100, (function (param) {
        return Vector.makeBy(100, (function (i) {
                      return i;
                    }));
      }));

var l0 = Belt_Array.makeBy(100, (function (param) {
        return Immutable.List(Belt_Array.makeBy(100, (function (i) {
                          return i;
                        })));
      }));

var a0 = Belt_Array.makeBy(100, (function (param) {
        return Belt_Array.makeBy(100, (function (i) {
                      return i;
                    }));
      }));

var setup$4 = "let n = " + 100 + "\nlet v0 = A.makeBy(n, V.makeBy(n, i => i))\nlet l0 = A.makeBy(n, _ => L.fromArray(A.makeBy(n, i => i)))";

var benchmarks$2 = [
  {
    name: "Vector.concatMany",
    code: "V.concatMany(v0)",
    f: (function () {
        return Vector.concatMany(v0);
      })
  },
  {
    name: "ImmutableJs.concat",
    code: "L.concatMany(l0)",
    f: (function () {
        return ImmutableJs$Benchmark.List.concatMany(l0);
      })
  }
];

var suite$4 = {
  name: "Concat",
  setup: setup$4,
  benchmarks: benchmarks$2
};

var Concat = {
  n: 100,
  v0: v0,
  l0: l0,
  a0: a0,
  setup: setup$4,
  benchmarks: benchmarks$2,
  suite: suite$4
};

var v0$1 = Belt_Array.range(1, 10000);

var v1 = Vector.fromArray(Belt_Array.range(1, 10000));

var v2 = Immutable.List(Belt_Array.range(1, 10000));

var v3 = Mori.into(Mori.vector(), Belt_Array.range(1, 10000));

var setup$5 = "let n = 10000;\nlet v0 = A.range(1, n);\nlet v1 = Vector.fromArray(A.range(1, n));\nlet v2 = ImmutableJs.List.fromArray(A.range(1, n));\nlet v3 = Mori.into(Mori.vector(), A.range(1, n));";

var Fixture = {
  n: 10000,
  v0: v0$1,
  v1: v1,
  v2: v2,
  v3: v3,
  setup: setup$5
};

var indices = Belt_Array.shuffle(Belt_Array.range(0, 9999));

var setup$6 = setup$5 + "\\nlet indices = A.range(0, n - 1)->A.shuffle;";

var accessSuite_benchmarks = [
  {
    name: "Vector.getExn",
    code: "indices->A.forEach(i => Vector.get(v1, i)->ignore)",
    f: (function () {
        return Belt_Array.forEach(indices, (function (i) {
                      Vector.getExn(v1, i);
                    }));
      })
  },
  {
    name: "ImmutableJs.List.get",
    code: "indices->A.forEach(i => ImmutableJs.List.get(v2, i)->ignore)",
    f: (function () {
        return Belt_Array.forEach(indices, (function (i) {
                      v2.get(i);
                    }));
      })
  },
  {
    name: "Mori.nth",
    code: "indices->A.forEach(i => Mori.nth(v3, i)->ignore)",
    f: (function () {
        return Belt_Array.forEach(indices, (function (i) {
                      Mori.nth(v3, i);
                    }));
      })
  }
];

var accessSuite = {
  name: "Random Access",
  setup: setup$6,
  benchmarks: accessSuite_benchmarks
};

var updateSuite_benchmarks = [
  {
    name: "Vector.setExn",
    code: "indices->A.reduce(v1, (v, i) => Vector.setExn(v, i, -1))",
    f: (function () {
        return Belt_Array.reduce(indices, v1, (function (v, i) {
                      return Vector.setExn(v, i, -1);
                    }));
      })
  },
  {
    name: "ImmutableJs.List.set",
    code: "indices\\n->A.reduce(v2, (v, i) => ImmutableJs.List.set(v, i, -1))",
    f: (function () {
        return Belt_Array.reduce(indices, v2, (function (v, i) {
                      return v.set(i, -1);
                    }));
      })
  },
  {
    name: "Mori.assoc",
    code: "indices->A.reduce(v3, (v, i) => Mori.assoc(v, i, -1))",
    f: (function () {
        return Belt_Array.reduce(indices, v3, (function (v, i) {
                      return Mori.assoc(v, i, -1);
                    }));
      })
  }
];

var updateSuite = {
  name: "Random Update",
  setup: setup$6,
  benchmarks: updateSuite_benchmarks
};

var AccessUpdate = {
  indices: indices,
  setup: setup$6,
  accessSuite: accessSuite,
  updateSuite: updateSuite
};

var suite_benchmarks$2 = [
  {
    name: "Vector.reduce",
    code: "v1->Vector.reduce(0, (+))",
    f: (function () {
        return Vector.reduce(v1, 0, (function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }));
      })
  },
  {
    name: "ImmutableJs.List.reduce",
    code: "v2->ImmutableJs.List.reduce((+), 0)",
    f: (function () {
        return v2.reduce((function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }), 0);
      })
  },
  {
    name: "Mori.reduce",
    code: "v3->Mori.reduce((+), 0, _)",
    f: (function () {
        return Mori.reduce((function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }), 0, v3);
      })
  }
];

var suite$5 = {
  name: "Reduce",
  setup: setup$5,
  benchmarks: suite_benchmarks$2
};

var suite2_benchmarks = [
  {
    name: "Js.Array2.reduce (built-in)",
    code: "v0->Js.Array2.reduce((+), 0)",
    f: (function () {
        return v0$1.reduce((function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }), 0);
      })
  },
  {
    name: "Belt.Array.reduce",
    code: "v0->Belt.Array.reduce(0, (+))",
    f: (function () {
        return Belt_Array.reduce(v0$1, 0, (function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }));
      })
  },
  {
    name: "Vector.reduce",
    code: "v1->Vector.reduce(0, (+))",
    f: (function () {
        return Vector.reduce(v1, 0, (function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }));
      })
  }
];

var suite2 = {
  name: "Reduce (vs. mutable)",
  setup: setup$5,
  benchmarks: suite2_benchmarks
};

var Reduce = {
  setup: setup$5,
  suite: suite$5,
  suite2: suite2
};

function map(x) {
  switch (x) {
    case /* Create */0 :
        return {
                suite: suite,
                url: "create"
              };
    case /* Convert */1 :
        return {
                suite: suite$1,
                url: "convert"
              };
    case /* Push */2 :
        return {
                suite: suite$2,
                url: "push"
              };
    case /* Pop */3 :
        return {
                suite: suite$3,
                url: "pop"
              };
    case /* Concat */4 :
        return {
                suite: suite$4,
                url: "concat"
              };
    case /* RandomAccess */5 :
        return {
                suite: accessSuite,
                url: "random-access"
              };
    case /* RandomUpdate */6 :
        return {
                suite: updateSuite,
                url: "random-update"
              };
    case /* Reduce */7 :
        return {
                suite: suite$5,
                url: "reduce"
              };
    case /* ReduceMutable */8 :
        return {
                suite: suite2,
                url: "reduce-mutable"
              };
    
  }
}

function fromUrl(x) {
  switch (x) {
    case "concat" :
        return /* Concat */4;
    case "convert" :
        return /* Convert */1;
    case "create" :
        return /* Create */0;
    case "pop" :
        return /* Pop */3;
    case "push" :
        return /* Push */2;
    case "random-access" :
        return /* RandomAccess */5;
    case "random-update" :
        return /* RandomUpdate */6;
    case "reduce" :
        return /* Reduce */7;
    case "reduce-mutable" :
        return /* ReduceMutable */8;
    default:
      return ;
  }
}

var routes = [
  /* Create */0,
  /* Convert */1,
  /* Push */2,
  /* Pop */3,
  /* Concat */4,
  /* RandomAccess */5,
  /* RandomUpdate */6,
  /* Reduce */7,
  /* ReduceMutable */8
];

var Routes = {
  map: map,
  fromUrl: fromUrl,
  routes: routes
};

var A;

var V;

var L;

export {
  A ,
  V ,
  L ,
  ar1k ,
  ar10k ,
  v10k ,
  l10k ,
  m10k ,
  Create ,
  Convert ,
  Push ,
  Pop ,
  Concat ,
  Fixture ,
  AccessUpdate ,
  Reduce ,
  Routes ,
}
/* ar1k Not a pure module */
