// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("bs-jest/lib/js/src/jest.js");
var React = require("react");
var Enzyme = require("bs-enzyme/lib/js/src/Enzyme.js");
var Enzyme$1 = require("enzyme");
var BaseProps$BsSpectacle = require("../../src/BaseProps.js");
var EnzymeAdapterReact = require("enzyme-adapter-react-16");

Enzyme.configureEnzyme(new EnzymeAdapterReact());

window.matchMedia = function() {return {matches: false}};
;

global.localStorage = {
  setItem() {}
};
;

function setup(component) {
  return Enzyme$1.shallow(component, {
              context: {
                styles: {
                  components: {
                    heading: {
                      h1: { }
                    },
                    s: { }
                  },
                  colors: { },
                  fonts: { },
                  prism: { }
                },
                store: {
                  getState: (function () {
                      return {
                              style: { },
                              route: {
                                slide: 0
                              }
                            };
                    }),
                  subscribe: (function () {
                      return /* () */0;
                    }),
                  dispatch: (function () {
                      return /* () */0;
                    })
                }
              }
            });
}

function MakeTest(Blueprint) {
  describe(Blueprint[/* name */0], (function () {
          return Jest.test("with props", (function () {
                        var component = setup(React.cloneElement(Blueprint[/* element */1], { }));
                        return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                      }));
        }));
  return /* module */[];
}

function MakeBasePropsTest(Blueprint) {
  describe(Blueprint[/* name */0], (function () {
          Jest.test("without any props", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], { }));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("italic", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("bold", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("caps", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("margin", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, "10px", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("padding", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, "10px", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("textColor", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, "#621fe2", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("textSize", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, "10px", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("textAlign", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, "center", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("textFont", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "sans-serif", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("bgColor", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "#ffee65", undefined, undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("bgImage", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "img.jpg", undefined, undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("bgSize", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "100%", undefined, undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("bgPosition", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "top", undefined, undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("bgRepeat", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "none", undefined, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("bgDarken", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 0.7, undefined, undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          Jest.test("overflow", (function () {
                  var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "hidden", undefined, { })));
                  return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                }));
          return Jest.test("height", (function () {
                        var component = setup(React.cloneElement(Blueprint[/* element */1], BaseProps$BsSpectacle.extendProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "10px", { })));
                        return Jest.ExpectJs[/* toMatchSnapshot */16](Jest.ExpectJs[/* expect */0](component));
                      }));
        }));
  return /* module */[];
}

exports.setup = setup;
exports.MakeTest = MakeTest;
exports.MakeBasePropsTest = MakeBasePropsTest;
/*  Not a pure module */
